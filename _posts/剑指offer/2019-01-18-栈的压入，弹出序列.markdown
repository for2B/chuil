---
layout:     post
title:      "栈的压入，弹出序列"
subtitle:   "剑指offer"
date:       2019-01-18
author:     "chl"
header-img: "/img/jzoffer.jpg"
tags:
    - 剑指offer
    - 算法
    - 数据结构
--- 

## 题目描述
输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）

## 解法 
需要开辟一个辅助栈来将压入序列中的数据压入；然后依次判断弹出序列中的元素是否跟栈顶的相同，相同时弹出栈顶；不相同时将剩余的元素依次压入，直到与此时弹出序列中的元素相同时，再执行弹出；

## 代码
```
class Solution {
public:
    bool IsPopOrder(vector<int> pushV,vector<int> popV) {
    
        stack<int> stack1;
        int index_popV = 0;
        int index_pushV = 0;
        while(index_popV < popV.size()){
            if( !stack1.empty() && popV[index_popV] == stack1.top()  ){
                stack1.pop();
                index_popV++;
            }else if(index_pushV == pushV.size()){
                return false;
            } 
            else{
                while(index_pushV!=pushV.size()){
                    stack1.push(pushV[index_pushV]);
                    index_pushV++;
                    if(stack1.top() == popV[index_popV] ){
                        break;
                    }
                }
            }
        }
        return true;
    }
};
``` 