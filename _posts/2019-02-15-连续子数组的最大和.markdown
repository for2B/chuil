---
layout:     post
title:      "连续子数组的最大和"
subtitle:   "剑指offer"
date:       2019-02-15
author:     "chl"
header-img: "img/img/jzoffer.jpg"
tags:
    - 剑指offer
    - 算法
    - 数据结构
--- 

## 题目描述
HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)


## 解法
通过遍历一遍数组来求出和最大的子序列；保存两个数值，一个是最近的累加和lastsum，一个数目前为止最大和的值maxsum；每次遍历到一个元素时，加入到lastsum，然后先跟元素自身比较，如果lastsum比当前元素还小，则抛弃之前和，使lastsum=当前元素，比较当前元素和maxsum的大小，若大于，则maxsun=当前元素值；若lastsum比当前元素大，则比较lastsum与max的大小，若lastsum大于maxsum，则maxsum = lastsum；
## 代码
```
     int FindGreatestSumOfSubArray(vector<int> array) {
        int max = array[0];
        int lastsum = array[0];
        for(int i = 1 ; i < array.size() ;i++){
            lastsum = array[i]+lastsum;
            if(lastsum < array[i] ){
                lastsum = array[i];
                if(max<array[i]) max = array[i];
                continue;
            }
            if(lastsum > max){
                max = lastsum;
            }
        }
        return max;
    }
```

## 总结