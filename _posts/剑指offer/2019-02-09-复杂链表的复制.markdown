---
layout:     post
title:      "复杂链表的复制"
subtitle:   "剑指offer"
date:       2019-02-09
author:     "chl"
header-img: "/img/jzoffer.jpg"
tags:
    - 剑指offer
--- 

## 题目描述
输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）


## 解法一
首先从链表节点的next开始复制，先获得一条单向链表，在获得单向链表的过程中，使用map来将原链表节点和复制后得到的链表节点建立映射；
接着复制链表节点中的特殊指针，根据原链表中的特殊指针在map中获取对应的复制节点；

## 解法一代码
```
/*
struct RandomListNode {
    int label;
    struct RandomListNode *next, *random;
    RandomListNode(int x) :
            label(x), next(NULL), random(NULL) {
    }
};
*/
class Solution {
public:
    map<RandomListNode*, RandomListNode*> RandomMap;
    RandomListNode* Clone(RandomListNode* pHead)
    {
        if(pHead == nullptr) return nullptr;
        RandomListNode *cHead = new RandomListNode(-1);
        CopyLinkForNext(pHead,cHead);
        CopyLinkForRandom(pHead,cHead);
        return cHead;
    }
    void CopyLinkForNext(RandomListNode* pHead, RandomListNode *cHead) {
        if (cHead == nullptr) return;
        RandomListNode* chead = cHead;
        RandomListNode* phead = pHead;
        while (phead != nullptr) {
            chead->label = phead->label;
            RandomMap[phead] = chead;
            phead = phead->next;
            if (phead == nullptr) break;
            RandomListNode* temp = new RandomListNode(-1);
            chead->next = temp;
            chead = chead->next;
        }
    }
    void CopyLinkForRandom(RandomListNode *pHead, RandomListNode* cHead) {
        if (cHead == nullptr) return;
        RandomListNode* chead = cHead;
        RandomListNode* phead = pHead;
        while (phead != nullptr) {
            if (phead->random == nullptr) {
                chead = chead->next;
                phead = phead->next;
                continue;
            }
            chead->random = RandomMap[phead->random];
            chead = chead->next;
            phead = phead->next;
        }
    }
    
};
```
## 解法二 
![图片](https://note.youdao.com/yws/public/resource/0f1bc32c627d060d4d8f99297e85a4f1/xmlnote/347DA55C3C364C7CBEF85BDCFDCFAE7F/4250)
##  解法二代码
```
public class Solution {
    public RandomListNode Clone(RandomListNode pHead) {
        if(pHead == null) {
            return null;
        }
         
        RandomListNode currentNode = pHead;
        //1、复制每个结点，如复制结点A得到A1，将结点A1插到结点A后面；
        while(currentNode != null){
            RandomListNode cloneNode = new RandomListNode(currentNode.label);
            RandomListNode nextNode = currentNode.next;
            currentNode.next = cloneNode;
            cloneNode.next = nextNode;
            currentNode = nextNode;
        }
         
        currentNode = pHead;
        //2、重新遍历链表，复制老结点的随机指针给新结点，如A1.random = A.random.next;
        while(currentNode != null) {
            currentNode.next.random = currentNode.random==null?null:currentNode.random.next;
            currentNode = currentNode.next.next;
        }
         
        //3、拆分链表，将链表拆分为原链表和复制后的链表
        currentNode = pHead;
        RandomListNode pCloneHead = pHead.next;
        while(currentNode != null) {
            RandomListNode cloneNode = currentNode.next;
            currentNode.next = cloneNode.next;
            cloneNode.next = cloneNode.next==null?null:cloneNode.next.next;
            currentNode = currentNode.next;
        }
         
        return pCloneHead;
    }
}
```
